/** {/ profile html
     <img src="/profile-picture" height="100"/>

     <form th:action="@{/profile-picture}" enctype="multipart/form-data" method="post">
         <label>Picture</label>
         <input type="file" name="image" accept="image/*" />

         <br/>

         <input type="submit" value="update"/>
     </form>

     // application properties
     sync.uploads.folder=/Users/User/IdeaProjects/sync-24-56/src/main/resources/static/images
     spring.servlet.multipart.max-file-size=10MB
     spring.servlet.multipart.max-request-size=50MB

     //UIUsercontroller

     @Value("${sync.uploads.folder:/tmp}")
         String uploadDirectory;


     @PostMapping(value = "/profile-picture")
         public RedirectView changeProfilePicture(@RequestParam("image") MultipartFile image, Authentication authentication) throws IOException  {
             User currentUser = (User) authentication.getPrincipal();
             Path fileNameAndPath = Paths.get(uploadDirectory, currentUser.getId() + "." + getExtensionByStringHandling(image.getOriginalFilename()));
             deleteExistingProfilePics(currentUser.getId());
             Files.write(fileNameAndPath, image.getBytes());
             return new RedirectView("/profile");
         }


         @GetMapping(value = "/profile-picture", produces = "image/*")
         public ResponseEntity<ByteArrayResource> getUserProfilePicture(Authentication authentication) throws IOException {
             User currentUser = (User) authentication.getPrincipal();
             long id = currentUser.getId();
             File dir = new File(uploadDirectory);
             FilenameFilter filter = (dir1, name) -> name.contains(String.valueOf(id));
             String[] files = dir.list(filter);
             if (files != null && files.length > 0) {
                 Logger.getAnonymousLogger().info("FILE PATH IS: " + uploadDirectory + File.separator + files[0]);
                 try (FileInputStream fs = new FileInputStream(uploadDirectory + File.separator + files[0])) {
                     return ResponseEntity.ok(new ByteArrayResource(fs.readAllBytes()));
                 } catch (FileNotFoundException exception) {
                     Logger.getAnonymousLogger().info("Profile picture cannot be found for user with id: " + id);
                 }
             }
             return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
         }

         private void deleteExistingProfilePics(int userId) {
             File dir = new File(uploadDirectory);
             FilenameFilter filter = (dir1, name) -> name.contains(String.valueOf(userId) + ".");
             String[] files = dir.list(filter);
             if (files != null) {
                 for (String file: files) {
                     Logger.getAnonymousLogger().info("Deleting profile picture " + file);
                     File f = new File(uploadDirectory + File.separator + file);
                     f.delete();
                 }
             }
         }

         private String getExtensionByStringHandling(String filename) {
             return Optional.ofNullable(filename)
                     .filter(f -> f.contains("."))
                     .map(f -> f.substring(filename.lastIndexOf(".") + 1)).orElse(null);
         }

     @GetMapping(value = "/about")
         public String showAboutPage() {
             return "about";
         }

     //about html
     <!DOCTYPE html>
     <html lang="en" xmlns:th="http://www.w3.org/1999/xhtml">
     <head>
         <meta charset="UTF-8">
         <meta name="viewport" content="width=device-width, initial-scale=1.0">
         <title>About Us</title>
         <link rel="stylesheet" type="text/css" media="all" href="../static/css/style.css" th:href="@{/css/style.css}"/>
         <link rel="stylesheet" type="text/css" media="all" href="../static/css/about.css" th:href="@{/css/about.css}"/>
         <link rel="stylesheet" th:href="@{https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css}">
         <link rel="preconnect" href="https://fonts.googleapis.com" />
         <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
         <link
                 href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700@100@200@300@300@400@500@600@800@900&display=swap"
                 rel="stylesheet"
         />
         <link rel="preconnect" href="https://fonts.googleapis.com" />
         <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
         <link
                 href="https://fonts.googleapis.com/css2?family=Kosugi+Maru&family=Moirai+One&display=swap"
                 rel="stylesheet"
         />

         <link rel="preconnect" href="https://fonts.googleapis.com">
         <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
         <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@700&display=swap" rel="stylesheet">

         <link rel="icon" type="image/icon" href="../static/images/logo_no_name.png" th:href="@{/images/logo_no_name.png}">
     </head>
     <body class="content-container">
     <section th:insert="~{navigation.html :: nav}"></section>
     <section class="section-hero">
         <h1 class="question">-</h1>
         <h1>Каква е нашата цел?</h1>
         <p>Нашата цел е да ви помогнем да се чувствате красиви и уверени, без да рискувате появата на акне или алергични реакции от нашите продукти. Вярваме, че красотата трябва да бъде безопасна и достъпна за всички. Затова нашата цел е да предложим грижа за кожата и грим, които не само ви правят прекрасни, но и предпазват от неприятностите
             Когато става въпрос за вашата кожа, ние приемаме безкомпромисен подход. За нас, качеството и безопасността са от решаващо значение.</p>

         <h1 class="question">-</h1>
         <h1>Каква е нашата мисия?</h1>
         <p>Нашата мисия е да бъдем вашият надежден партньор в света на красотата. Предлагаме грижа и грим, които ви вдъхновяват да изразите себе си по най-добрия начин. Нашата цел е да ви предоставим най-добрите продукти на пазара, създадени от водещи експерти в индустрията.
             Вярваме в иновацията, качеството и красотата, които ще ви направят да се чувствате уверени и прекрасни във всеки един момент.
             Ние сме тук, за да ви предложим най-доброто от света на козметиката, без компромиси по отношение на качеството и безопасността. Нашата ангажираност е да ви осигурим продукти, които отразяват вашата уникалност и стил, без значение какво търсите - от ежедневна грижа до специални поводи.
             Всеки заслужава да се чувства красив и уверен в собствената си кожа!
         </p>

         <h1 class="question">-</h1>
         <h1>Защо да изберете нас?</h1>
         <p>
             Има множество причини да изберете нас за ваш партньор в света на красотата. Първо, ние се грижим за нашите клиенти и техните нужди,
             като предлагаме широка гама от продукти, които отговарят на различни желания и стилове.
             Освен това, ние сме посветени на качеството и безопасността на нашите продукти, използвайки само най-добрите съставки и формули.
             Нашите иновации винаги са насочени към отговаряне на нуждите на нашите клиенти, като предлагаме последните тенденции и технологии в индустрията на красотата. Ние също така предлагаме персонализирани съвети и подкрепа, за да ви помогнем да постигнете най-добрия външен вид. В крайна сметка, ние не просто предлагаме продукти,
             а създаваме едно цялостно преживяване на красотата, което ви вдъхновява да се почувствате уверени и прекрасни в собствената си кожа.
         </p>
         <br>
     </section>
     <section th:insert="~{navigation.html :: footer}"></section>
     </body>
     </html>

     //edit-user
     <!DOCTYPE html>
     <html lang="en" xmlns:th="http://www.thymeleaf.org">
     <head>
         <meta charset="UTF-8">
         <meta name="viewport" content="width=device-width, initial-scale=1.0">
         <title>Edit user</title>
         <link rel="preconnect" href="https://fonts.googleapis.com" />
         <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
         <link rel="preconnect" href="https://fonts.googleapis.com" />
         <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
         <link
                 href="https://fonts.googleapis.com/css2?family=Kosugi+Maru&family=Moirai+One&display=swap"
                 rel="stylesheet"
         />

         <link rel="preconnect" href="https://fonts.googleapis.com">
         <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
         <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@700&display=swap" rel="stylesheet">
         <link rel="stylesheet" th:href="@{https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css}">
         <link rel="stylesheet" type="text/css" media="all" href="../../static/css/style.css" th:href="@{/css/style.css}"/>
         <link rel="stylesheet" type="text/css" media="all" href="../../static/css/login.css" th:href="@{/css/login.css}"/>
     </head>
     <body>
     <section th:insert="~{navigation.html :: nav}"></section>
     <section class="content">
         <form class="form" id="edit-user" th:object="${user}" th:action="@{/users/edit-user}" method = "post">
             <h2>РЕДАКТИРАНЕ</h2>
             <div class="input-small">
                 <input th:field="*{id}" type="text" id="id" th:value="${user.getId()}" disabled/>
                 <input th:field="*{id}" type="hidden" name="id" id="idHidden" th:value="${user.getId()}"/>
             </div>
             <div class="input-small">
                 <input th:field="*{username}" type="text" name="username" id="username" th:value="${user.getUsername()}"/>
             </div>

             <div class="input-small">
                 <input th:field="*{firstName}" type="text" name="firstname" id="firstname" th:value="${user.getFirstName()}"/>
             </div>
             <div class="input-small">
                 <input th:field="*{lastName}" type="text" name="lastname" id="lastname" th:value="${user.getLastName()}"/>
             </div>

             <div class="input-small">
                 <input th:field="*{email}" type="text" name="email" id="email" th:value="${user.getEmail()}"/>
             </div>

             <div class="input-small">
                 <input th:field="*{message}" type="text" name="message" id="message" th:value="${user.getMessage()}"/>
             </div>

             <div class="input-small">
                 <input th:field="*{password}" type="text" name="password" id="password" th:value="${user.getPassword()}"/>
             </div>
             <div class="input-small">
                 <input th:field="*{admin}" type="text" name="admin" id="admin"/>
             </div>
             <div class="button-group">
                 <button class="button-link" th:type="submit" type = "submit"><b>РЕДАКТИРАНЕ</b></button>
             </div>
         </form>
     </section>
     </body>
     </html>


     // tests

     package com.dzi.project;

     import com.dzi.project.models.User;
     import com.dzi.project.repositories.UserRepository;
     import com.dzi.project.services.LogInService;
     import com.dzi.project.services.UserService;
     import org.junit.jupiter.api.Test;
     import org.junit.jupiter.api.extension.ExtendWith;
     import org.mockito.ArgumentCaptor;
     import org.mockito.InjectMocks;
     import org.mockito.Mock;
     import org.mockito.junit.jupiter.MockitoExtension;
     import org.springframework.boot.test.context.SpringBootTest;

     import static org.junit.jupiter.api.Assertions.*;
     import static org.mockito.Mockito.*;

     @ExtendWith(MockitoExtension.class)
     class ProjectApplicationTests {

     	@Mock
     	private UserRepository userRepository;
     	private ArgumentCaptor<User> userArgumentCaptor = ArgumentCaptor.forClass(User.class);

     	@InjectMocks
     	private UserService userService;

     	@Test
     	void whenLogInWithValidCredentialsThenReturnTrue() {
     		// Arrange
     		String username = "testUser";
     		String password = "testPassword";

     		// Act
     		User user = new User();
     		user.setUsername(username);
     		user.setPassword(password);

     		when(userRepository.findByUsername(username)).thenReturn(user);

     		LogInService logInService = new LogInService(userRepository);

     		// Assert
     		assertTrue(logInService.logIn(username, password));
     	}

     	@Test
     	void whenLogInWithNullUserThenReturnFalse() {
     		// Arrange
     		String username = "testUser";
     		String password = "testPassword";

     		// Act
     		when(userRepository.findByUsername(username)).thenReturn(null);

     		LogInService logInService = new LogInService(userRepository);

     		// Assert
     		assertFalse(logInService.logIn(username, password));
     	}

     	@Test
     	public void testIsUsernameAvailableWhenUsernameIsAvailable() {
     		// Arrange
     		String username = "newUser";

     		// Act
     		boolean result = userService.isUsernameAvailable(username);

     		// Assert
     		assertTrue(result);
     	}


     	@Test
     	public void testCreateUser() {
     		// Arrange
     		User existingUser = new User("existingUser", "password");
     		when(userRepository.saveAndFlush(any())).thenReturn(existingUser);
     		userService = new UserService(userRepository);
     		// Act
     		userService.createUser(existingUser);

     		// Assert
     		verify(userRepository, times(1)).saveAndFlush(userArgumentCaptor.capture());
     		assertEquals(existingUser.getUsername(), userArgumentCaptor.getValue().getUsername());
     	}

     	@Test
     	public void testEditUser() {
     		// Arrange
     		User existingUser = new User("existingUser", "password");
     		when(userRepository.save(any())).thenReturn(existingUser);
     		userService = new UserService(userRepository);
     		// Act
     		userService.editUser(existingUser);

     		// Assert
     		verify(userRepository, times(1)).save(userArgumentCaptor.capture());
     		assertEquals(existingUser.getUsername(), userArgumentCaptor.getValue().getUsername());
     	}

     }


/*}*/

